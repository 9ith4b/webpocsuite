from abc import ABC, abstractmethod
import logging
import requests


requests.packages.urllib3.disable_warnings()
logging.basicConfig(format='%(asctime)s - %(levelname)-8s:: %(message)s', level=logging.INFO)

class ErrorResult:
    status_code = 1000
    content     = b'error'
    text        = 'error'

class ExploitStatus:
    SUCCESS = 1000
    FAILED  = 1001

class HttpClient:
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.360',
    }

    def __init__(self, url):
        self.url = url
        self.sess = requests.Session()

    def request(self, method, uri, *args, **kwargs):
        try:
            kwargs.setdefault('headers', self.headers)
            kwargs.setdefault('verify', False)
            kwargs.setdefault('timeout', 5.0)
            return self.sess.request(method, self.url+uri, *args, **kwargs)
        except requests.exceptions.ReadTimeout:
            logging.error(f"{self.url} - Access network timeout")
        except requests.exceptions.ConnectionError:
            logging.error(f"{self.url} - An error occurred while connecting to the network")
        except Exception as e:
            logging.error(f"{self.url} - Network connection error")
        return ErrorResult

RED     = '\033[1;91m'
BLUE    = '\033[1;94m'
GREEN   = '\033[1;32m'
ENDC    = '\033[0m'

level_color = {'error': RED, 'info': BLUE}

class Exploit(ABC):
    def log(self, msg, level):
        level = level.lower()
        getattr(logging, level)(level_color[level] + f'{self.url} - {msg}' + ENDC)
        return
    
    def printinfo(self):
        for key, value in self.info.items():
            print("[*] %-20s: %s" %(key, value))

    @abstractmethod
    def upload(self):
        pass

    @abstractmethod
    def attack(self, cmd):
        pass

    @abstractmethod
    def clean(self):
        pass
